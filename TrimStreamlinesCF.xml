<ServerManagerConfiguration>
  <ProxyGroup name="filters">
    <SourceProxy name="TrimStreamlines" class="vtkPythonProgrammableFilter" label="Trim Streamlines">

      <Documentation
        long_help="Trim streamlines based to a range of IntegrationTime"
        short_help="Trim streamlines based to a range of IntegrationTime">
      </Documentation>


      <InputProperty
        name="Input"
        command="SetInputConnection">
          <ProxyGroupDomain name="groups">
            <Group name="sources"/>
            <Group name="filters"/>
          </ProxyGroupDomain>
           <DataTypeDomain name="input_type">
    <DataType value="vtkUnstructuredGrid"/>
</DataTypeDomain>
      </InputProperty>


      <IntVectorProperty
        name="end"
        label="end"
        initial_string="end"
        command="SetParameter"
        animateable="1"
        default_values="-1"
        number_of_elements="1">
        <Documentation></Documentation>
      </IntVectorProperty>


      <IntVectorProperty
        name="start"
        label="start"
        initial_string="start"
        command="SetParameter"
        animateable="1"
        default_values="-1"
        number_of_elements="1">
        <Documentation></Documentation>
      </IntVectorProperty>




      <!-- Output data type: "vtkUnstructuredGrid" -->
      <IntVectorProperty command="SetOutputDataSetType"
                         default_values="4"
                         name="OutputDataSetType"
                         number_of_elements="1"
                         panel_visibility="never">
        <Documentation>The value of this property determines the dataset type
        for the output of the programmable filter.</Documentation>
      </IntVectorProperty>


      <StringVectorProperty
        name="Script"
        command="SetScript"
        number_of_elements="1"
        default_values="import numpy as np&#xA;from vtk.numpy_interface import dataset_adapter as dsa&#xA;&#xA;sl = self.GetPolyDataInput()&#xA;nsl = dsa.WrapDataObject(sl)&#xA;&#xA;itime = nsl.PointData['IntegrationTime']&#xA;&#xA;nv = nsl.Cells[nsl.CellLocations]    # number of verts in each line&#xA;ns = nsl.CellLocations + 1           # index of first vertex in each line&#xA;ne = ns + nv                         # index one past the last vertex&#xA;olines = [nsl.Cells[i:j] for i,j in zip(ns, ne)]&#xA;nlines = []&#xA;&#xA;iarrays = {'points': nsl.Points}    # initialize source arrays with input points&#xA;oarrays = {'points': []}&#xA;for n in nsl.PointData.keys():&#xA;  iarrays[n] = nsl.PointData[n]     # add input point data arrays to source arrays&#xA;  oarrays[n] = []                   # add empty destination arrays&#xA;&#xA;knt = 0&#xA;for line in olines:&#xA;  if start != -1: line = [l for l in line if itime[l] &gt; start]&#xA;  if end   != -1: line = [l for l in line if itime[l] &lt; end]&#xA;  for n in iarrays.keys(): oarrays[n].append(iarrays[n][line])&#xA;  nlines.append(range(knt, knt+len(line)))&#xA;  knt = knt + len(line)&#xA;&#xA;tsl = vtk.vtkUnstructuredGrid()&#xA;&#xA;line_lengths = [len(l)+1 for l in nlines]  # number of vertices + 1 for count&#xA;&#xA;ct = dsa.numpyTovtkDataArray(np.array([vtk.VTK_POLY_LINE]*len(nlines)).astype('u1'))&#xA;co = dsa.numpy_support.numpy_to_vtkIdTypeArray(np.hstack(([0], np.cumsum(line_lengths)[:-1])))&#xA;&#xA;ca = vtk.vtkCellArray()&#xA;for l in nlines:&#xA;  ca.InsertNextCell(len(l), l)&#xA;&#xA;tsl.SetCells(ct, co, ca)&#xA;&#xA;cid = dsa.numpyTovtkDataArray(np.arange(len(nlines)).astype('i4'))&#xA;cid.SetName('cell id')&#xA;tsl.GetCellData().AddArray(cid)&#xA;&#xA;ptsa = np.concatenate(oarrays['points']).reshape((-1, 3)).astype('f4')&#xA;&#xA;op = vtk.vtkPoints()&#xA;op.SetNumberOfPoints(ptsa.shape[0])&#xA;&#xA;for i, p in enumerate(ptsa):&#xA;  op.InsertPoint(i, p[0], p[1], p[2])&#xA;&#xA;tsl.SetPoints(op)&#xA;&#xA;for n in oarrays:&#xA;  if n != 'points':&#xA;    a = dsa.numpyTovtkDataArray(np.concatenate(oarrays[n]))&#xA;    a.SetName(n)&#xA;    tsl.GetPointData().AddArray(a)&#xA;&#xA;self.GetUnstructuredGridOutput().ShallowCopy(tsl)&#xA;"
        panel_visibility="advanced">
        <Hints>
         <Widget type="multi_line"/>
       </Hints>
      <Documentation>This property contains the text of a python program that
      the programmable source runs.</Documentation>
      </StringVectorProperty>



    </SourceProxy>
 </ProxyGroup>
</ServerManagerConfiguration>
